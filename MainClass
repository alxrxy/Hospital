package ilstu.edu;

import java.util.ArrayList;
import java.util.InputMismatchException;
import java.util.Scanner;

public class MainClass {

	private static ArrayList<Patient> patients = new ArrayList<>();
	private static Scanner sc = new Scanner(System.in);
	static String physician = "Dr. Sanjay Gupta";

	public static void main(String[] args) {

		while (true) {

			System.out.println(
					"Choose an option:\n1. Admit a patient\n2. Print patient information\n3. Submit a PCR test result\n4. Do rounds\n5. Discharge patient\n6. Exit");
			int option = sc.nextInt();
			sc.nextLine();

			if (option == 1) {
				admitPatient();
			} else if (option == 2) {
				printPatientInfo();
			} else if (option == 3) {
				submitPCR();
			} else if (option == 4) {
				doRounds();
			} else if (option == 5) {
				discharge();
			} else if (option == 6) {
				System.out.println("Goodbye.");
				System.exit(0);
			} else {
				System.out.println("Invalid option.");
			}
		}
	}

	private static boolean letters(String name) {

		for (char c : name.toCharArray()) {
			if (!Character.isLetter(c)) {
				return false;
			}
		}
		return true;
	}

	private static void admitPatient() {

		String result = "";
		while (true) {

			System.out.println("Enter PCR result (negative/positive): ");
			result = sc.nextLine().toLowerCase();

			if (result.equals("negative") || result.equals("positive")) {
				break;
			} else {
				System.out.println("Invalid input.");
			}
		}

		int id = -1;
		while (true) {

			System.out.println("Enter ID:");
			try {
				id = sc.nextInt();
				sc.nextLine();
				if (id > 0) {
					break;
				} else {
					System.out.println("Invalid ID.");
				}
			} catch (InputMismatchException e) {
				System.out.println("Please enter a valid number for ID.");
				sc.nextLine();
			}
		}

		String fName = "";
		while (true) {

			System.out.println("Enter First Name:");
			fName = sc.nextLine();
			if (!fName.trim().isEmpty() && letters(fName)) {
				break;
			} else {
				System.out.println("Invalid input.");
			}
		}

		String lName = "";
		while (true) {

			System.out.println("Enter Last Name:");
			lName = sc.nextLine();
			if (!lName.trim().isEmpty() && letters(lName)) {
				break;
			} else {
				System.out.println("Invalid input.");
			}
		}

		int age = -1;
		while (true) {

			System.out.println("Enter Age:");
			try {
				age = sc.nextInt();
				sc.nextLine();
				if (age >= 0 && age <= 120) {
					break;
				} else {
					System.out.println("Invalid age. Please enter an age between 0 and 120.");
				}
			} catch (InputMismatchException e) {
				System.out.println("Please enter a valid number for age.");
				sc.nextLine();
			}
		}

		if (result.equals("positive")) {
			double temperature = -1.0;
			while (true) {

				System.out.println("Enter Temperature:");
				try {
					temperature = sc.nextDouble();
					sc.nextLine();
					if (temperature >= 32.0 && temperature <= 46.5) {
						break;
					} else {
						System.out.println("Invalid temperature. Please enter a temperature between 32.0 and 46.5.");
					}
				} catch (InputMismatchException e) {
					System.out.println("Please enter a valid number for temperature.");
					sc.nextLine();
				}
			}
			patients.add(new Covid19Patient(id, fName, lName, physician, age, temperature));
		} else {

			String mainSymptom = "";
			while (true) {

				System.out.println("Enter Main Symptom (coughing, runny nose, stuffy nose, hypertension):");
				mainSymptom = sc.nextLine().toLowerCase();
				if (mainSymptom.equals("coughing") || mainSymptom.equals("runny nose")
						|| mainSymptom.equals("stuffy nose") || mainSymptom.equals("hypertension")) {
					break;
				} else {
					System.out.println("Invalid symptom.");
				}
			}
			patients.add(new RegularPatient(id, fName, lName, physician, age, mainSymptom));
		}

		if (result.equals("positive")) {
			for (Patient patient : patients) {
				if (patient.getID() == id) {
					patient.setPcr(true);
					break;
				}
			}
		} else {
			for (Patient patient : patients) {
				if (patient.getID() == id) {
					patient.setPcr(false);
					break;
				}
			}
		}
	}

	private static void printPatientInfo() {

		if (patients.isEmpty()) {
			System.out.println("No patients admitted.");
		} else {
			for (Patient patient : patients) {
				System.out.println(patient.toString());
			}
		}
	}

	private static void submitPCR() {

		System.out.print("Enter patient ID to submit PCR: ");
		int id = -1;
		try {
			id = sc.nextInt();
			sc.nextLine();
		} catch (InputMismatchException e) {
			System.out.println("Invalid input for patient ID.");
			sc.nextLine();
			return;
		}

		System.out.print("Enter PCR result (negative/positive): ");
		String pcrResult = sc.nextLine().toLowerCase();

		for (Patient patient : patients) {
			if (patient.getID() == id) {
				if (pcrResult.equals("positive")) {
					patient.setPcr(true);
					System.out.println("PCR result updated successfully for patient with ID: " + id);
				} else if (pcrResult.equals("negative")) {
					patient.setPcr(false);
					System.out.println("PCR result updated successfully for patient with ID: " + id);
				} else {
					System.out.println("Invalid PCR result.");
				}
				return;
			}
		}
		System.out.println("Patient with ID " + id + " was not found.");
	}

	private static void doRounds() {

		for (Patient patient : patients) {

			System.out.println("Patient ID: " + patient.getID());
			if (patient instanceof Covid19Patient) {

				Covid19Patient covidPatient = (Covid19Patient) patient;
				System.out.print("Enter current temperature of patient: ");
				double temperature = sc.nextDouble();
				sc.nextLine();
				covidPatient.setTemperature(temperature);
				System.out.println("Treatment: " + covidPatient.treat());
			} else {
				System.out.println("Treatment: " + patient.treat());
			}
		}
	}

	private static void discharge() {

		System.out.print("Enter patient ID to discharge: ");
		int id = -1;
		try {
			id = sc.nextInt();
			sc.nextLine();
		} catch (InputMismatchException e) {
			System.out.println("Invalid input for patient ID.");
			sc.nextLine();
			return;
		}

		for (int i = 0; i < patients.size(); i++) {
			if (patients.get(i).getID() == id) {
				if (patients.get(i).getPcr() == false) {
					patients.remove(i);
					System.out.println("Patient with ID " + id + " was discharged successfully.");
					return;
				} else {
					System.out.println("Patient with ID " + id + " cannot be discharged due to positive PCR test.");
				}
			}
		}
		System.out.println("Patient with ID " + id + " was not found.");
	}
}
